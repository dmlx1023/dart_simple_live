name: simple-dev-apk-build

# 触发条件：Push 到 'dev' 或手动触发
on:
  workflow_dispatch:
  push:
    branches:
      - 'dev'

jobs:
  # 专门用于构建 Android DEV APK 的 Job
  build-dev-apk:
    # 切换到更经济和高效的 Linux 运行器
    runs-on: ubuntu-latest 

    permissions:
      contents: write
      
    steps:
      # 1. 检出代码
      - uses: actions/checkout@v4
        with:
          ref: dev
          fetch-depth: 0 # 确保完整获取历史，提高检出成功率

      # 2. 设置环境：JAVA & Flutter
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: "17"
          cache: "gradle"

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.x'
          cache: true

      # 3. 获取依赖 (Packages)
      - name: Restore packages (flutter pub get)
        run: cd simple_live_app && flutter pub get

      # 4. 核心兼容性修复和清理 (AAPT2 Fix)
      # 强制使用稳定的 Android SDK 34 并清理 Gradle 缓存，解决资源链接错误。
      - name: Fix SDK and Clean Gradle
        run: |
          BUILD_GRADLE_PATH="simple_live_app/android/app/build.gradle"
          # 强制替换 compileSdkVersion 和 targetSdkVersion 为 34
          sed -i 's/compileSdkVersion flutter.compileSdkVersion/compileSdkVersion 34/g' $BUILD_GRADLE_PATH
          sed -i 's/targetSdkVersion flutter.targetSdkVersion/targetSdkVersion 34/g' $BUILD_GRADLE_PATH
          # 清理 Gradle 缓存
          cd simple_live_app/android
          ./gradlew clean

      # 5. 构建移动端 DEV APK (Debug Build)
      - name: Build DEV APK
        run: cd simple_live_app && flutter build apk --debug --split-per-abi

      # 6. 上传产物 (Artifacts)
      - name: Upload DEV APK to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-debug-dev
          # 上传所有 Debug APK 文件
          path: simple_live_app/build/app/outputs/flutter-apk/*.apk
          
      # 完成提示
      - run: echo "✅ Mobile DEV APK build job completed successfully."
